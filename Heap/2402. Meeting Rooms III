class Solution {
public:
    int mostBooked(int n, vector<vector<int>>& meetings) {
        sort(meetings.begin(), meetings.end());

        priority_queue<int, vector<int>, greater<int>> room;

        // {endTime, roomIndex}
        priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<>> timing;

        for (int i = 0; i < n; i++) {
            room.push(i);
        }

        vector<int> num(n, 0); // Room usage count

        for (auto& it : meetings) {
            long long start = it[0], end = it[1];

            // Free up rooms whose meetings have ended
            while (!timing.empty() && timing.top().first <= start) {
                room.push(timing.top().second);
                timing.pop();
            }

            if (!room.empty()) {
                int roomIndex = room.top();
                room.pop();
                timing.push({end, roomIndex});
                num[roomIndex]++;
            } else {
                // Delay the meeting to the earliest finishing room
                auto [endTime, roomIndex] = timing.top();
                timing.pop();
                long long newEnd = endTime + (end - start);
                timing.push({newEnd, roomIndex});
                num[roomIndex]++;
            }
        }

        int ans = 0;
        for (int i = 1; i < n; i++) {
            if (num[i] > num[ans]) {
                ans = i;
            }
        }

        return ans;
    }
};
