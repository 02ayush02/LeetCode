class Solution {
public:
    const int MOD = 1e9 + 7;

    // long long binExp(long long a, long long b, int mod) {
    //     long long res = 1;
    //     a %= mod;
    //     while (b > 0) {
    //         if (b & 1) {
    //             res = (res * a) % mod;
    //         }
    //         a = (a * a) % mod;
    //         b >>= 1;
    //     }
    //     return res;
    // }

    int numSubseq(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int n = nums.size();

        vector<int> power(n, 1);
        for (int i = 1; i < n; i++) {
            power[i] = (power[i - 1] * 2LL) % MOD;
        }

        int ans = 0;
        int low = 0, high = n - 1;
        while (low <= high) {
            if (nums[low] + nums[high] <= target) {
                ans = (ans + power[high - low]) % MOD;
                low++;
            } else {
                high--;
            }
        }

        return ans;
    }
};
