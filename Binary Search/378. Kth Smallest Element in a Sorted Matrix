class Solution {
public:
    int func(vector<vector<int>>& matrix, int val, int n) {
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            cnt += upper_bound(matrix[i].begin(), matrix[i].end(), val) - matrix[i].begin();
        } 
        return cnt;
    }

    int kthSmallest(vector<vector<int>>& matrix, int k) {
        int n = matrix.size();
        int m = matrix[0].size();
    
        int low = matrix[0][0];
        int high = matrix[n - 1][n - 1];

        while (low < high) {
            int mid = low + (high - low) / 2;

            int cnt = func(matrix, mid, n);
            if (cnt < k) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }
};
