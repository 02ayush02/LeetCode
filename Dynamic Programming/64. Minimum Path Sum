class Solution {
public:
    // long long func(int i, int j, vector<vector<int>>& grid, vector<vector<long long>>& dp) {
    //     if (i < 0 || j < 0) {
    //         return INT_MAX;
    //     }
    //     if (i == 0 && j == 0) {
    //         return grid[i][j];
    //     }
    //     if (dp[i][j] != 0) return dp[i][j];

    //     long long up = grid[i][j] + func(i - 1, j, grid, dp);
    //     long long left = grid[i][j] + func(i, j - 1, grid, dp);
        
    //     return dp[i][j] = min(up, left);
    // }




    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<long long>> dp(m, vector<long long>(n, 0));
        dp[0][0] = grid[0][0];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) continue;
                int up = grid[i][j];
                if (i > 0) {
                    up += dp[i - 1][j];
                }
                else up += 1e9;

                int left = grid[i][j];
                if (j > 0) {
                    left += dp[i][j - 1];
                }
                else left += 1e9;;

                dp[i][j] = min(up, left);
            }
        }

        return dp[m - 1][n - 1];

        // return func(m - 1, n - 1, grid, dp);
    }
};
