class Solution {
public:
    int func(string text1, string text2, int index1, int index2, vector<vector<int>>& dp) {
        if (index1 == text1.size() || index2 == text2.size()) {
            return 0;
        }

        if (dp[index1][index2] != -1) return dp[index1][index2];
        if (text1[index1] == text2[index2]) {
            return dp[index1][index2] = 1 + func(text1, text2, index1 + 1, index2 + 1, dp);
        } else {
            return dp[index1][index2] = max(func(text1, text2, index1 + 1, index2, dp),
            func(text1, text2, index1, index2 + 1, dp));
        }

        return -1;
    }


    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size(), m = text2.size();
        vector<vector<int>> dp(n, vector<int>(m, 0));

        for (int j = 0; j < m; j++) {
            if (text1[0] == text2[j]) dp[0][j] = 1;
            else if (j > 0) dp[0][j] = dp[0][j - 1];
        }

        for (int i = 0; i < n; i++) {
            if (text1[i] == text2[0]) dp[i][0] = 1;
            else if (i > 0) dp[i][0] = dp[i - 1][0];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                if (text1[i] == text2[j]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[n - 1][m - 1];

        // return func(text1, text2, 0, 0, dp);
    }
};
