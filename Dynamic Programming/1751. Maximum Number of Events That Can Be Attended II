class Solution {
public:
    #define ll long long

    int findNext(int index, int prevEnd, const vector<vector<int>>& events) {
        int low = index, high = events.size();
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (events[mid][0] > prevEnd)
                high = mid;
            else
                low = mid + 1;
        }
        return low;
    }

    ll func(int index, vector<vector<int>>& events, int k, vector<vector<ll>>& dp) {
        if (k == 0 || index == events.size()) return 0;
        if (dp[index][k] != -1) return dp[index][k];

        int nextIndex = findNext(index + 1, events[index][1], events);
        ll take = events[index][2] + func(nextIndex, events, k - 1, dp);

        ll notTake = func(index + 1, events, k, dp);

        return dp[index][k] = max(take, notTake);
    }

    int maxValue(vector<vector<int>>& events, int k) {
        sort(events.begin(), events.end());
        int n = events.size();
        vector<vector<ll>> dp(n, vector<ll>(k + 1, -1));
        return func(0, events, k, dp);
    }
};
