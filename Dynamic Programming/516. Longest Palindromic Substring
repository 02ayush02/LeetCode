class Solution {
public:
    int func(int left, int right, string& s, vector<vector<int>>& dp) {
        if (left == right) {
            return 1;
        }
        if (left > right) {
            return 0;
        }

        if (dp[left][right] != -1) return dp[left][right];

        if (s[left] == s[right]) {
            return dp[left][right] = 2 + func(left + 1, right - 1, s, dp);
        } else {
            return dp[left][right] = max(func(left + 1, right, s, dp), func(left, right - 1, s, dp));
        }
        return -1;
    }



    int longestPalindromeSubseq(string s) {
        int n = s.size();

        // vector<vector<int>> dp(n, vector<int>(n, -1));
        vector<vector<int>> dp(n, vector<int>(n, 0));
        string rev(s.rbegin(), s.rend());

        dp[0][0] = (s[0] == rev[0]) ? 1 : 0;
        for (int j = 1; j < n; j++) {
            if (s[0] == rev[j]) 
                dp[0][j] = 1;
            else 
                dp[0][j] = dp[0][j - 1];
        }
        for (int i = 1; i < n; i++) {
            if (s[i] == rev[0]) 
                dp[i][0] = 1;
            else 
                dp[i][0] = dp[i - 1][0];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 1; j < n; j++) {
                if (s[i] == rev[j]) {
                    dp[i][j] = 1 + dp[i - 1][j - 1];
                } else {
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return dp[n - 1][n - 1];

        return func(0, n - 1, s, dp);
    }
};
