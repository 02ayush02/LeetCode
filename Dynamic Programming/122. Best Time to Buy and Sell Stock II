class Solution {
public:
    int func(int index, vector<int>& prices, vector<vector<int>>& dp, int flag) {
        if (index == prices.size()) {
            return 0;
        }
        if (dp[index][flag] != -1) return dp[index][flag]; 
        int profit = 0;

        if (flag) {
            profit = max(-prices[index] + func(index  + 1, prices, dp, !flag),
                            0 + func(index + 1, prices, dp, flag) );
        } else {
            profit = max(prices[index] + func(index + 1, prices, dp, !flag),
                            0 + func(index + 1, prices, dp, flag));
        }

        return dp[index][flag] = profit;
    }



    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> dp(n + 1, vector<int>(2 , 0));
    
    // flag: 
        // 1 -> Buy
        // 0 -> Not Buy 

    // Space Optimization  
    vector<int>ahead(2, 0), curr(2, 0);
    ahead[0] = 0, ahead[1] = 0;

        for (int index = n - 1; index >= 0; index--) {
            for (int flag = 0; flag <= 1; flag++) {
                int profit = 0;
                if (flag) {
                    profit = max(-prices[index] + ahead[!flag],
                            0 + ahead[flag]);
                } else {
                    profit = max( prices[index] + ahead[!flag],
                            0 + ahead[flag]);
                }
                curr[flag] = profit;
            }
            ahead = curr;
        }

        return ahead[1];


        // dp[n][0] = 0, dp[n][1] = 0;

        // for (int index = n - 1; index >= 0; index--) {
        //     for (int flag = 0; flag <= 1; flag++) {
        //         int profit = 0;
        //         if (flag) {
        //             profit = max(-prices[index] + dp[index  + 1][!flag],
        //                     0 + dp[index + 1][flag]);
        //         } else {
        //             profit = max( prices[index] + dp[index + 1][!flag],
        //                     0 + dp[index + 1][flag]);
        //         }

        //         dp[index][flag] = profit;
        //     }
        // }

        // return dp[0][1];




        // return func(0, prices, dp, 1);  
    }
};
