class Solution {
public:
    int MOD = 1e9 + 7;
    // long long func(int i, int cnt, vector<int>& prefix, int k, vector<vector<int>>& dp) {
    //     if (i == prefix.size()) {
    //         if (cnt < k) {
    //             return 1;
    //         }
    //         return 0;
    //     }
    //     if (dp[i][cnt] != -1) return dp[i][cnt] % MOD;

    //     long long sum = 0;
    //     int n = prefix[i];

    //     for (int take = 1; take <= n; take++) {
    //         if (cnt + take < k) {
    //             sum = (sum + func(i + 1, cnt + take, prefix, k, dp)) % MOD;
    //         } else {
    //             break;
    //         }
    //     }
    //     return dp[i][cnt] = sum;
    // }

    int possibleStringCount(string word, int k) {

    // Tabulation
        if (k > word.size()) {
            return 0;
        }

        int n = word.size();
        vector<int> prefix;

        int cnt = 1;

        for (int i = 1; i < n; i++) {
            if (word[i] == word[i - 1]) {
                cnt++;
            }
            else {
                prefix.push_back(cnt);
                cnt = 1;
            }
        }
        prefix.push_back(cnt);

        long long total = 1;

        for (auto it : prefix) {
            total = (total * it) % MOD;
        }

        // vector<vector<int>> dp(prefix.size() + 1, vector<int>(k + 1, -1));

        vector<int> prev(k + 1, 0);

        int size = prefix.size();
        for (int i = 0; i < k; i++) {
            prev[i] = 1;
        }
        prev[k] = 0;

        for (int i = size - 1; i >= 0; i--) {
            vector<int> arr(k + 2, 0);

            for (int j = 1; j <= k + 1; j++) {
                arr[j] = (arr[j - 1] + prev[j - 1]) % MOD;
            }

            
            vector<int> curr(k + 1, 0);
            for (int cnt = k - 1; cnt >= 0; cnt--) {
                int l = cnt + 1;
                int r = min(cnt + prefix[i], k);
                curr[cnt] = (arr[r + 1] - arr[l] + MOD) % MOD;

                // long long sum = 0;
                // for (int take = 1; take <= prefix[i]; take++) {
                //     if (cnt + take < k) {
                //         sum = (sum + dp[i + 1][cnt + take]) % MOD;
                //     } else {
                //         break;
                //     }
                // }
                // dp[i][cnt] = sum;
            }
            prev = curr;
        }

        return (total - prev[0] + MOD) % MOD;


    // Memoization
        // vector<vector<int>> dp(prefix.size() + 1, vector<int>(k + 1, -1));

        // long long invalid = func(0, 0, prefix, k, dp) % MOD;


        // return (total - invalid + MOD) % MOD;

    }
};
