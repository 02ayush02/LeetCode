class Solution {
public:
    int func(int i, int j, vector<vector<int>>& triangle, int n, vector<vector<int>>& dp) {
        if (i == n - 1) {
            return triangle[i][j];
        }

        if (dp[i][j] != 0) return dp[i][j];

        int down = triangle[i][j] + func(i + 1, j, triangle, n, dp);
        int diagonal = triangle[i][j] + func(i + 1, j + 1, triangle, n, dp);


        return dp[i][j] = min(down, diagonal);
    }


    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        int m = triangle[n - 1].size();
        vector<vector<int>>dp(n, vector<int>(m, 0));

        for (int i = n - 1; i >= 0; i--) {
            dp[n - 1][i] = triangle[n - 1][i];
        }

        for (int i = n - 2; i >= 0; i--) {
            for (int j = i; j >= 0; j--) {
                int up = triangle[i][j] + dp[i + 1][j];
                int diagonal = triangle[i][j] + dp[i + 1][j + 1];

                dp[i][j] = min(up, diagonal);
            }
        }
        return dp[0][0];

        // return func(0, 0, triangle, n, dp);
    }
};
