class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n < 2) return {0};
        
        unordered_map<int, vector<int>> adj;
        vector<int> indegree(n, 0);

        for (auto it : edges) {
            int u = it[0];
            int v = it[1];
            indegree[u]++;
            indegree[v]++;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        queue<int> q;
        for (int i = 0; i < n; i++) {
            if (indegree[i] == 1) {
                q.push(i);
            }
        }

        while (n > 2) {
            int size = q.size();
            n -= size;

            for (int i = 0; i < size; i++) {
                int u = q.front();
                q.pop();

                for (auto it : adj[u]) {
                    indegree[it]--;
                    if (indegree[it] == 1) {
                        q.push(it);
                    }
                }
            }
        }

        vector<int> ans;
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            ans.push_back(node);
        }

        return ans;
    }
};
