class Solution {
public:
    void dfs(int row, int col, vector<vector<int>>& vis, vector<vector<int>>& grid) {
        vis[row][col] = 1;

        vector<pair<int, int>> d{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
        int n = vis.size();
        int m = vis[0].size();

        for (int i = 0; i < 4; i++) {
            int nrow = row + d[i].first;
            int ncol = col + d[i].second;

            if (nrow >= 0 && ncol >= 0 && nrow < n && ncol < m && !vis[nrow][ncol] &&
                grid[nrow][ncol]) {
                    dfs(nrow, ncol, vis, grid);
                }
        }
    }

    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> vis(n, vector<int>(m, 0));

        for (int i = 0; i < n; i++) {
            if (!vis[i][0] && grid[i][0]) dfs(i, 0, vis, grid);
            if (!vis[i][m - 1] && grid[i][m - 1]) dfs(i, m - 1, vis, grid);
        }

        for (int j = 0; j < m; j++) {
            if (!vis[0][j] && grid[0][j]) dfs(0, j, vis, grid);
            if (!vis[n - 1][j] && grid[n - 1][j]) dfs(n - 1, j, vis, grid);
        }

        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (!vis[i][j] && grid[i][j]) cnt++;
            }
        }

        return cnt;
    }
};
