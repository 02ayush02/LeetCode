class Solution {
public:
    double dfs(string src, string dst, unordered_map<string, vector<pair<string, double>>>& adj, unordered_set<string>& visited) {
        if (src == dst) return 1.0;

        visited.insert(src);

        for (auto& neighbor : adj[src]) {
            string v = neighbor.first;
            double val = neighbor.second;

            if (visited.find(v) == visited.end()) {
                double result = dfs(v, dst, adj, visited);
                if (result != -1.0) {
                    return val * result;
                }
            }
        }

        return -1.0;
    }

    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        unordered_map<string, vector<pair<string, double>>> adj;

        for (int i = 0; i < equations.size(); i++) {
            string u = equations[i][0];
            string v = equations[i][1];
            double val = values[i];

            adj[u].push_back({v, val});
            adj[v].push_back({u, 1.0 / val});
        }

        vector<double> ans;

        for (auto& query : queries) {
            string snode = query[0];
            string enode = query[1];

            if (adj.find(snode) == adj.end() || adj.find(enode) == adj.end()) {
                ans.push_back(-1.0);
            } else {
                unordered_set<string> visited;
                double result = dfs(snode, enode, adj, visited);
                ans.push_back(result);
            }
        }

        return ans;
    }
};
