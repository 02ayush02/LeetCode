class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        int n = maze.size();
        int m = maze[0].size();

        queue<pair<int, pair<int, int>>> q;

        q.push({0, {entrance[0], entrance[1]}});
        vector<vector<int>> visited(n, vector<int>(m, 0));
        visited[entrance[0]][entrance[1]] = 1;

        vector<pair<int, int>> d{{-1, 0}, {0, 1}, {1, 0}, {0, -1}};

        while (!q.empty()) {
            int dist = q.front().first;
            int row = q.front().second.first;
            int col = q.front().second.second;
            q.pop();
        
            if ((row == 0 || col == 0 || row == n - 1 || col == m - 1) &&
                !(row == entrance[0] && col == entrance[1])) {
                return dist;
            }


            for (int i = 0; i < 4; i++) {
                int nrow = row + d[i].first;
                int ncol = col + d[i].second;

                if (nrow >= 0 && ncol >= 0 && nrow < n && ncol < m &&
                    !visited[nrow][ncol] && maze[nrow][ncol] == '.') {
                        visited[nrow][ncol] = 1;
                        q.push({dist + 1, {nrow, ncol}});
                    }
            }
        }


        return -1;
    }
};
