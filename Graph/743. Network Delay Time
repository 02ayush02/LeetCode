class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int, int>>> adj(n);

        for (auto it : times) {
            int u = it[0] - 1;
            int v = it[1] - 1;
            adj[u].push_back({v, it[2]});
        }

        vector<int> dist(n, INT_MAX);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

        pq.push({k - 1, 0});  // {node, distance}
        dist[k - 1] = 0;

        while(!pq.empty()) {
            int node = pq.top().first;
            int d = pq.top().second;
            pq.pop();

            if (dist[node] < d) continue;

            for (auto it : adj[node]) {
                int nextNode = it.first;
                int next_weight = it.second;

                if (dist[nextNode] > next_weight + d) {
                    dist[nextNode] = next_weight + d;
                    pq.push({nextNode, dist[nextNode]});
                }
            }
        }

        int ans = 0;

        for (auto it : dist) {
            ans = max(ans, it);
        }

        return (ans == INT_MAX) ? -1 : ans;
    }
};
