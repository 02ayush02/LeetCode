class Solution {
public:
    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {
        // Custom Sort 

        auto gain = [](int pass, int total) {
            return (double)(pass + 1) / (total + 1) - (double)pass / total;
        };

        priority_queue<pair<double, int>> pq;
        for (int i = 0; i < classes.size(); i++) {
            pq.push({gain(classes[i][0], classes[i][1]), i});
        }

        while(extraStudents--) {
            auto top = pq.top();
            pq.pop();
            int idx = top.second;
            classes[idx][0]++;
            classes[idx][1]++;
            pq.push({gain(classes[idx][0], classes[idx][1]), idx});
        }
        double sum = 0.0;
        for (int i = 0; i < classes.size(); i++) {
            sum += (double)classes[i][0] / (double)classes[i][1];
        }

        return sum / classes.size();
    // will give time limit exceeded
        // int m = classes.size();

        // for (int i = 1; i <= extraStudents; i++) {
        //     double maxi = -1.0;
        //     int save = -1;
        //     for (int j = 0; j < m; j++) {
        //         double a = classes[j][0];
        //         double b = classes[j][1];
        //         double gain = (a + 1) / (b + 1) - (a / b);

        //         if (gain > maxi) {  
        //             maxi = gain;
        //             save = j;
        //         }
        //     }
        //     classes[save][0] += 1;
        //     classes[save][1] += 1;
        // }

        // double sum = 0;
        // for (int i = 0; i < m; i++) {
        //     sum += (double)classes[i][0] / (double)classes[i][1];
        // }

        // return sum / m;
    }
};
